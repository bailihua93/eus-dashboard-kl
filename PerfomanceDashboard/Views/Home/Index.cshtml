@{
    Layout = "~/Views/Layout.cshtml";
}

<body>
    <div id="content-1">
        <g class="uv-caption" id="unassigned-ticket-caption">
            <text class="uv-caption-text" y="25" x="1" text-anchor="middle">List of Current In Progress FHR Tickets</text>
        </g>
        <g class="uv-caption" id="total-stats-caption">
            <text class="uv-caption-text" y="25" x="1" text-anchor="middle">The Most Important Things</text>
        </g>
        <g class="uv-subcaption" id="total-stats-subcaption">
            <text class="uv-subcaption-text" y="-11.000000000000004" x="225" text-anchor="middle">Unissigned Tickets + Minutes to Last Four Hour Response Ticket Expiration + Current Dynamic Backlog</text>
        </g>
        <g class="uv-subcaption" id="unassigned-ticket-subcaption">
            <text class="uv-subcaption-text" y="-11.000000000000004" x="225" text-anchor="middle">FHR Tickets Contains Short Description With the Remaining Time To Success Resolve</text>
        </g>
        <div id="uv-div"></div>
        <div class=table-unasigned>
            <table class="table-fill">
                <thead>
                    <tr>
                        <th>Affected User</th>
                        <th>Engineer</th>
                        <th>Summary</th>
                        <th>Timer</th>
                    </tr>
                </thead>
                <tbody class="table-hover" id="fhrTableDiv"></tbody>
            </table>
        </div>
        <div id="some-kind-of-background" class="key-figures"></div>
        <div class="main-panel">
            <div class="digit-and-caption" id="unisigned">
                <text class="big-digit" id="unisigned-text"></text>
                <text class="key-figures-caption">Unassigned Ticket(s)</text>
            </div>
            <div class="digit-and-caption" id="fhr-timer">
                <text class="big-digit" id="fhr-timer-text"></text>
                <text class="key-figures-caption">Minute(s) To FHR Expiration</text>
            </div>
            <div class="digit-and-caption" id="backlog">
                <text class="big-digit" id="backlog-text"></text>
                <text class="key-figures-caption">Current Backlog</text>
            </div>
            <br />
            <br />
            <br class="clearBoth" />
            <footer>
                <img class="footer-element" id="kl-logo" width="200" src="~/Content/Kaspersky_Lab_logo.svg" />
            </footer>
        </div>
    </div>
    <script type="text/javascript" id="runscript">

        var mins = new Date().getMinutes();

        var screenWidth = screen.width;
        var screenHeight = screen.height;

        var rInProgress = {};
        var rFuture = {};
        var rCA = {};
        var rVR = {};
        var resolvedTickets = {};

        var emplNamesShort = [];

        var ipDataSet = [];
        var rpwDataSet = [];
        var atgbdowDataSet = [];
        var fDataSet = [];
        var caDataSet = [];
        var vrDataSet = [];

        var triggerUnisignedReq = 0;

        // → from back-end
        var assignedToGroupByDayOfWeek = @Html.Raw(Json.Encode(ViewData["assignedToGroupByDayOfWeek"]));
        var resolvedTicketPerWeekByUser = @Html.Raw(Json.Encode(ViewData["resolvedTicketPerWeekByUser"]));
        var backlog = @Html.Raw(Json.Encode(ViewData["Backlog"]));
        var unisignedReq = @Html.Raw(Json.Encode(ViewData["UnassignedTicket"]));
        var FHR = @Html.Raw(Json.Encode(ViewData["FHR"]));
        var assignedWithStatusByPerson = @Html.Raw(Json.Encode(ViewData["assignedWithStatusByPerson"]));
        var emplNamesShort = @Html.Raw(Json.Encode(ViewData["emplNamesShort"]));
        var fhrTable = @Html.Raw(Json.Encode(ViewData["fhrTable"]));
        var pereodical = @Html.Raw(Json.Encode(ViewData["pereodical"]));

        // → serivce function for use sleep() sometimes
        function sleep(time) {
            return
            new Promise((resolve) => setTimeout(resolve, time));
        }

        // → service function for use animate-lib via jQuery
        $.fn.extend({
            animateCss: function (animationName) {
                var animationEnd = 'webkitAnimationEnd mozAnimationEnd MSAnimationEnd oanimationend animationend';
                this.addClass('animated ' + animationName).one(animationEnd, function () {
                    $(this).removeClass('animated ' + animationName);
                });
            }
        });

        // → full screen and back to default screen with some kind of actions
        $(document).keyup(function (e) {
            if (e.which == 122) {
                e.preventDefault();
                if (window.innerHeight == screen.height) {
                    $("body").css("margin-top", "33px");
                    $("body").css("margin-left", "35px");
                    $("#unassigned-ticket-subcaption").css("top", "428px");
                    location.reload();
                } else {
                    location.reload();
                }
                return false;
            }
        });

        // → display the kaspersky lab logo after F12 update
        if (performance.navigation.type == 1) {
            if (window.innerHeight == screen.height) {
                if (screen.width > 1800) {
                    $("#kl-logo").css("display", "block");
                }
            }
        }

        // → fill data for charts
        // → assigned per user by status
        try {
            for (i = 0; i < emplNamesShort.length; i++) {
                rInProgress[emplNamesShort[i]] = parseInt(assignedWithStatusByPerson[i][1]);
                rFuture[emplNamesShort[i]] = parseInt(assignedWithStatusByPerson[i][2]);
                rCA[emplNamesShort[i]] = parseInt(assignedWithStatusByPerson[i][3]);
                rVR[emplNamesShort[i]] = parseInt(assignedWithStatusByPerson[i][4]);
            }
        }
        catch (e) {
            $("body").css("display", "none");
            location.reload();
        }

        for (i = 0; i < resolvedTicketPerWeekByUser.length; i++) {
            resolvedTickets[resolvedTicketPerWeekByUser[i][0]] = parseInt(resolvedTicketPerWeekByUser[i][1]);
        }

        // → construct charts via dataset
        for (i = 0; i < emplNamesShort.length; i++) {
            ipDataSet.push({
                name: emplNamesShort[i],
                value: rInProgress[emplNamesShort[i]]
            });
            fDataSet.push({
                name: emplNamesShort[i],
                value: rFuture[emplNamesShort[i]]
            });
            caDataSet.push({
                name: emplNamesShort[i],
                value: rCA[emplNamesShort[i]]
            });
            vrDataSet.push({
                name: emplNamesShort[i],
                value: rVR[emplNamesShort[i]]
            });
        }

        for (i = 0; i < resolvedTicketPerWeekByUser.length; i++) {
            if (resolvedTicketPerWeekByUser[i][0] != null) {
                rpwDataSet.push({
                    name: resolvedTicketPerWeekByUser[i][0],
                    value: resolvedTickets[resolvedTicketPerWeekByUser[i][0]]
                });
            }
        }

        for (i = 0; i < 10; i++) {
            atgbdowDataSet.push({
                name: assignedToGroupByDayOfWeek[i][0],
                value: assignedToGroupByDayOfWeek[i][0]
            });
        }

        // apply created dataset
        var AssignedWithStatusByPerson = {
            categories: ['In Progress', 'Future', 'Client Action', 'Vendor Reply'],
            dataset: {
                'In Progress': ipDataSet,
                'Future': fDataSet,
                'Client Action': caDataSet,
                'Vendor Reply': vrDataSet
            }
        }
        var ResolvedPerWeekByPerson = {
            categories: ['Resolved'],
            dataset: {
                'Resolved': rpwDataSet
            }
        }
        var AssignedToGroupByDaysOfTheWeek = {
            categories: ['Backlog'],
            dataset: {
                'Backlog': atgbdowDataSet
            }
        }

        // → create some kind of charts
        var chart1 = uv.chart('StackedBar', AssignedWithStatusByPerson, {
            meta: {
                caption: 'Assigned Tickets to Each Person',
                subcaption: 'Sorted by Amount of In Progress Tickets'
            },
            dimension: {
                height: screenHeight * 0.2703703703703704,
                width: screenWidth * 0.234375
            },
            legend: {
                fontsize: 11,
                fontweight: 'normal'
            },
            graph: {
                custompalette: ['#000', '#b64926', '#91aa9d', '#d1dbbd', '#dee2d5']
            },
            margin: {
                top: screenHeight * 0.0462962962962963,
                bottom: screenHeight * 0.0231481481481481,
            },
            scale: {
                ordinality: '0.1'
            }
        })

        var chart2 = uv.chart('StackedBar', ResolvedPerWeekByPerson, {
            meta: {
                caption: 'Resolved per Week by Person',
                subcaption: 'Sorted by Amount of Resolved Tickets'

            },
            dimension: {
                height: screenHeight * 0.2703703703703704,
                width: screenWidth * 0.234375
            },
            legend: {
                fontsize: 11,
                fontweight: 'normal'
            },
            graph: {
                custompalette: ['#3e606f']
            },
            margin: {
                top: screenHeight * 0.0462962962962963,
                bottom: screenHeight * 0.0231481481481481,
            },
            area: {
                range: 'monotone',
                offset: 'wiggle'
            },
            scale: {
                ordinality: '0.1'
            },
            bar: {
                textcolor: '#fff',
                strokecolor: '#fff',
                fontfill: '#fff'
            },
            label: {
                strokecolor: '#fff'
            }
        })

        var chart3 = uv.chart('Bar', AssignedToGroupByDaysOfTheWeek, {
            meta: {
                caption: 'Assigned to Group by the Day of the Week',
                subcaption: 'Amount of All Type Tickets Bar'
            },
            dimension: {
                height: screenHeight * 0.0925925925925926,
                width: screenWidth * 0.8854166666666667
            },
            legend: {
                fontsize: 11,
                fontweight: 'normal'
            },
            graph: {
                custompalette: ['#000']
            },
            margin: {
                top: screenHeight * 0.0462962962962963,
                bottom: screenHeight * 0.0231481481481481,
            },
            graph: {
                orientation: 'Vertical'
            },
            area: {
                range: 'monotone',
                offset: 'wiggle'
            },
            scale: {
                ordinality: '0.1'
            }
        })

        // → the only one function contains raw hex colors
        function panelColorChanger(targetAmount, elementToChange, greenZone, yellowZone) {
            switch (elementToChange) {
                case '#fhr-timer':
                    if (targetAmount >= greenZone) {
                        $(elementToChange).css('background', '#468966');
                    }
                    else {
                        if (targetAmount >= yellowZone) {
                            $(elementToChange).css('background', '#ffb03b');
                        }
                        else {
                            $(elementToChange).css('background', '#b64926');
                        }
                    }
                    if (targetAmount >= "-") {
                        $(elementToChange).css('background', '#468966');
                    }
                    break;

                case '#unisigned':
                case '#backlog':
                    if (targetAmount <= greenZone) {
                        $(elementToChange).css('background', '#468966');
                    }
                    else {
                        if ((targetAmount >= greenZone) && (targetAmount <= yellowZone)) {
                            $(elementToChange).css('background', '#ffb03b');
                        }
                        else {
                            $(elementToChange).css('background', '#b64926');
                        }
                    }
                    break;
            }
        }

        // → let's start
        $(document).ready(function () {
            $("body").css("display", "block"); // ← crutch
            $(".table-unasigned").animateCss('fadeIn');

            // →  show logo in full screen
            if( window.innerHeight == screen.height) {
                $("#kl-logo").css("display", "block");
            }

            // → show some variables
            document.getElementById('unisigned-text').innerHTML = unisignedReq;
            document.getElementById('fhr-timer-text').innerHTML = FHR;
            document.getElementById('backlog-text').innerHTML = backlog;

            // → angry fill days of the week for chart 4
            var currentDay = moment().format('dddd');
            var prevDay = [];
            for (i = 1; i < 10; i++)
            {
                prevDay[i] = moment().subtract(i - 1, "days").format('dddd');
            }

            // → change panel's color in accordance with value
            setInterval(function ()
            {
                panelColorChanger(FHR, "#fhr-timer", 30, 15);
                panelColorChanger(unisignedReq, "#unisigned", 4, 9);
                panelColorChanger(backlog, "#backlog", 40, 50);
                if (triggerUnisignedReq != unisignedReq) {
                    $("#unisigned").animateCss('shake');
                }
                triggerUnisignedReq = unisignedReq;
                $(".cge-in-progress text").css("fill","#fff");
                $("td:contains('(?)')").css("opacity", "1", "important");
            }, 100);

            // → angry add weeks labels under chart 4
            for (i = 1; i < 10; i++)
            {
                $("#uv-div div:nth-child(3)" ).find(".uv-hor-axis g:nth-child(1)").addClass("week-appearer");
                var oldElement = $(".week-appearer g:nth-child(" + i + ")").find("text").text();
                $(".week-appearer g:nth-child(" + i + ")").find("text").html("[" + oldElement + "] " + prevDay[i].toString());
            }

            // → animate background under fhr-table
            setInterval(function() {
                $("#some-kind-of-background").animate({opacity: "0.10"}, {duration: 30000});
            }, 60000);

            setInterval(function() {
                $("#some-kind-of-background").animate({opacity: "0.05"}, {duration: 30000});
            }, 30000);

            // → switch chart 1 into new full page view
            if (((window.screenWidth == 1920) && (window.screenHeight == 1080)) || ((window.screenWidth == 1680) && (window.screenHeight == 1050)))
            {
                setInterval(function() {
                    $("body").fadeOut();
                    $("body").delay(1500).queue(function() {
                        window.location = "/Home/Dispatcher";
                        $("body").dequeue();
                    });
                }, 120000);
            }

            // → fill fhr-table
            $("#fhrTableDiv").html("");
            var deadFhr = 0;
            for (i = 0; i < fhrTable.length; i++)
            {
                if (fhrTable[i][0] > 0)
                {
                    // → if fhr ticket not assigned
                    if (fhrTable[i][1].length < 1) {
                        fhrTable[i][1] = "<text id='who-do-fhr'>(?)</text>";
                    }
                    $("#fhrTableDiv").append("<tr><td>" + fhrTable[i][2] +
                    "</td><td>" + fhrTable[i][1] + "</td><td>" + fhrTable[i][3] + "</td><td>" + fhrTable[i][0]  + "</td></tr>");
                } else deadFhr++;
                if (deadFhr == fhrTable.length)
                {
                    $("#fhrTableDiv").html("<tr><td id='fhr-not-found' style='font-size: 33px; opacity: 0.8;' colspan='5'>FHR Tickets Not Found</td></tr>");
                }
            }

        });
    </script>
</body>
</html>
